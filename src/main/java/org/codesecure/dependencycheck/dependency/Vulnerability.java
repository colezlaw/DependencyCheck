package org.codesecure.dependencycheck.dependency;
/*
 * This file is part of DependencyCheck.
 *
 * DependencyCheck is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * DependencyCheck is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * DependencyCheck. If not, see http://www.gnu.org/licenses/.
 *
 * Copyright (c) 2012 Jeremy Long. All Rights Reserved.
 */

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * Contains the information about a vulnerability.
 *
 * @author Jeremy
 */
public class Vulnerability implements Serializable {

    private static final long serialVersionUID = 307319490326651052L;
    /**
     * The name of the vulnerability
     */
    private String name;

    /**
     * Get the value of name
     *
     * @return the value of name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the value of name
     *
     * @param name new value of name
     */
    public void setName(String name) {
        this.name = name;
    }
    /**
     * the description of the vulnerability
     */
    private String description;

    /**
     * Get the value of description
     *
     * @return the value of description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Set the value of description
     *
     * @param description new value of description
     */
    public void setDescription(String description) {
        this.description = description;
    }
    /**
     * References for this vulnerability
     */
    private List<Reference> references = new ArrayList<Reference>();

    /**
     * Get the value of references
     *
     * @return the value of references
     */
    public List<Reference> getReferences() {
        return references;
    }

    /**
     * Set the value of references
     *
     * @param references new value of references
     */
    public void setReferences(List<Reference> references) {
        this.references = references;
    }

    /**
     * Adds a reference to the references collection
     *
     * @param ref a reference for the vulnerability
     */
    public void addReference(Reference ref) {
        this.references.add(ref);
    }

    /**
     * Adds a reference
     * @param referenceSource the source of the referece
     * @param referenceName the referenceName of the reference
     * @param referenceUrl the url of the reference
     */
    public void addReference(String referenceSource, String referenceName, String referenceUrl) {
        Reference ref = new Reference();
        ref.setSource(referenceSource);
        ref.setName(referenceName);
        ref.setUrl(referenceUrl);
        this.references.add(ref);
    }
    /**
     * a list of vulnerable software
     */
    protected List<VulnerableSoftware> vulnerableSoftware;

    /**
     * Get the value of vulnerableSoftware
     *
     * @return the value of vulnerableSoftware
     */
    public List<VulnerableSoftware> getVulnerableSoftware() {
        return vulnerableSoftware;
    }

    /**
     * Set the value of vulnerableSoftware
     *
     * @param vulnerableSoftware new value of vulnerableSoftware
     */
    public void setVulnerableSoftware(List<VulnerableSoftware> vulnerableSoftware) {
        this.vulnerableSoftware = vulnerableSoftware;
    }

    /**
     * Adds an entry for vulnerable software
     * @param cpe string representation of a cpe
     * @param previousVersion the previous version (previousVersion - cpe would be considered vulnerable)
     */
    public void addVulnerableSoftware(String cpe, String previousVersion) {
        VulnerableSoftware vs = new VulnerableSoftware();
        vs.setCpe(cpe);
        if (previousVersion != null) {
            vs.setPreviousVersion(previousVersion);
        }
    }

    /**
     * Adds an entry for vulnerable software
     * @param cpe string representation of a CPE entry
     */
    public void addVulnerableSoftware(String cpe) {
        addVulnerableSoftware(cpe, null);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Vulnerability other = (Vulnerability) obj;
        if ((this.name == null) ? (other.name != null) : !this.name.equals(other.name)) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 41 * hash + (this.name != null ? this.name.hashCode() : 0);
        return hash;
    }
}
